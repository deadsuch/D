# ЛИСТИНГ КОДА АЛГОРИТМОВ, РЕАЛИЗУЮЩИХ БИЗНЕС-ЛОГИКУ СИСТЕМЫ БРОНИРОВАНИЯ МЕРОПРИЯТИЙ

## 1. ИНИЦИАЛИЗАЦИЯ БАЗЫ ДАННЫХ (server/index.js)

```javascript
function initializeDatabase() {
  db.serialize(() => {
    // Таблица пользователей
    db.run(`CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      email TEXT UNIQUE NOT NULL,
      password TEXT NOT NULL,
      role TEXT CHECK (role IN ('client', 'admin')) NOT NULL DEFAULT 'client',
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);
    
    // Таблица мероприятий
    db.run(`CREATE TABLE IF NOT EXISTS events (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      title TEXT NOT NULL,
      description TEXT,
      date_time DATETIME NOT NULL,
      location TEXT NOT NULL,
      total_seats INTEGER NOT NULL,
      available_seats INTEGER NOT NULL,
      price REAL NOT NULL,
      image_url TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);
    
    // Таблица бронирований
    db.run(`CREATE TABLE IF NOT EXISTS bookings (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id INTEGER NOT NULL,
      event_id INTEGER NOT NULL,
      tickets_count INTEGER NOT NULL,
      total_price REAL NOT NULL,
      status TEXT CHECK (status IN ('pending', 'confirmed', 'cancelled')) DEFAULT 'confirmed',
      ticket_sent INTEGER DEFAULT 0,
      booking_date DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES users (id),
      FOREIGN KEY (event_id) REFERENCES events (id)
    )`);

    // Создаем администратора по умолчанию
    const adminEmail = 'admin@example.com';
    db.get('SELECT id FROM users WHERE email = ?', [adminEmail], async (err, row) => {
      if (err) {
        console.error('Ошибка при проверке администратора:', err.message);
      } else if (!row) {
        // Создаем админа
        const hashedPassword = await bcrypt.hash('admin123', 10);
        db.run(
          'INSERT INTO users (name, email, password, role) VALUES (?, ?, ?, ?)',
          ['Администратор', adminEmail, hashedPassword, 'admin']
        );
      }
    });

    // Добавляем тестовые мероприятия (код опущен для краткости)
  });
}
```

## 2. АЛГОРИТМЫ АУТЕНТИФИКАЦИИ И АВТОРИЗАЦИИ

### 2.1 Middleware для проверки авторизации (server/index.js)

```javascript
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  
  if (!token) return res.status(401).json({ error: 'Требуется авторизация' });

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ error: 'Недействительный токен' });
    req.user = user;
    next();
  });
};

const isAdmin = (req, res, next) => {
  if (req.user.role !== 'admin') {
    return res.status(403).json({ error: 'Недостаточно прав' });
  }
  next();
};
```

### 2.2 Регистрация пользователя (server/index.js)

```javascript
app.post('/api/register', async (req, res) => {
  try {
    const { name, email, password } = req.body;

    if (!name || !email || !password) {
      return res.status(400).json({ error: 'Все поля обязательны для заполнения' });
    }

    // Проверяем, существует ли пользователь с таким email
    db.get('SELECT id FROM users WHERE email = ?', [email], async (err, row) => {
      if (err) {
        return res.status(500).json({ error: 'Ошибка при регистрации' });
      }
      if (row) {
        return res.status(400).json({ error: 'Пользователь с таким email уже существует' });
      }

      // Хешируем пароль
      const hashedPassword = await bcrypt.hash(password, 10);

      // Создаем нового пользователя
      db.run(
        'INSERT INTO users (name, email, password) VALUES (?, ?, ?)',
        [name, email, hashedPassword],
        function(err) {
          if (err) {
            return res.status(500).json({ error: 'Ошибка при создании пользователя' });
          }

          // Создаем токен JWT
          const token = jwt.sign(
            { id: this.lastID, email, role: 'client' },
            JWT_SECRET,
            { expiresIn: '7d' }
          );

          res.status(201).json({
            message: 'Пользователь успешно зарегистрирован',
            token,
            user: {
              id: this.lastID,
              name,
              email,
              role: 'client'
            }
          });
        }
      );
    });
  } catch (error) {
    console.error('Ошибка при регистрации:', error);
    res.status(500).json({ error: 'Внутренняя ошибка сервера' });
  }
});
```

### 2.3 Авторизация и создание токена (client/src/context/AuthContext.js)

```javascript
// Вход в систему
const login = async (email, password) => {
  setLoading(true);
  setError(null);
  
  try {
    const response = await authAPI.login({ email, password });
    
    // Сохраняем токен в localStorage
    localStorage.setItem('token', response.token);
    setToken(response.token);
    setCurrentUser(response.user);
    
    return response;
  } catch (err) {
    setError(err.message);
    throw err;
  } finally {
    setLoading(false);
  }
};
```

## 3. АЛГОРИТМЫ УПРАВЛЕНИЯ МЕРОПРИЯТИЯМИ (client/src/api/index.js)

```javascript
// Мероприятия
export const eventsAPI = {
  // Получение всех мероприятий
  getAll: () => {
    return fetchWithAuth('/events');
  },

  // Получение одного мероприятия (по ID)
  getById: (id) => {
    return fetchWithAuth(`/events/${id}`);
  },

  // Создание мероприятия (только для админа)
  create: (eventData) => {
    return fetchWithAuth('/events', {
      method: 'POST',
      body: JSON.stringify(eventData)
    });
  },

  // Обновление мероприятия (только для админа)
  update: (id, eventData) => {
    return fetchWithAuth(`/events/${id}`, {
      method: 'PUT',
      body: JSON.stringify(eventData)
    });
  },

  // Удаление мероприятия (только для админа)
  delete: (id) => {
    return fetchWithAuth(`/events/${id}`, {
      method: 'DELETE'
    });
  }
};
```

## 4. АЛГОРИТМЫ УПРАВЛЕНИЯ БРОНИРОВАНИЯМИ

### 4.1 API для бронирований (client/src/api/index.js)

```javascript
// Бронирования
export const bookingsAPI = {
  // Получение всех бронирований
  getAll: () => {
    return fetchWithAuth('/bookings');
  },

  // Получение бронирований текущего пользователя
  getUserBookings: () => {
    return fetchWithAuth('/bookings/user');
  },

  // Получение одного бронирования
  getById: (id) => {
    return fetchWithAuth(`/bookings/${id}`);
  },

  // Создание бронирования
  create: (bookingData) => {
    return fetchWithAuth('/bookings', {
      method: 'POST',
      body: JSON.stringify(bookingData)
    });
  },

  // Обновление бронирования
  update: (id, bookingData) => {
    return fetchWithAuth(`/bookings/${id}`, {
      method: 'PUT',
      body: JSON.stringify(bookingData)
    });
  },

  // Отмена бронирования
  cancel: (id) => {
    return fetchWithAuth(`/bookings/${id}`, {
      method: 'DELETE'
    });
  },
  
  // Получение электронного билета
  getTicket: (id) => {
    return fetchWithAuth(`/bookings/${id}/ticket`);
  },
  
  // Отправка билета по электронной почте
  sendTicketByEmail: (id) => {
    return fetchWithAuth(`/bookings/${id}/send-ticket`, {
      method: 'POST'
    });
  }
};
```

### 4.2 Получение информации о бронировании (server/routes/bookings.js)

```javascript
// Получение бронирования по ID
router.get('/:id', authenticateToken, (req, res) => {
  const { id } = req.params;
  const userId = req.user.id;
  const isAdmin = req.user.role === 'admin';
  
  // Запрос к базе данных для получения информации о бронировании
  let query = `
    SELECT b.*, 
           e.title as event_title, 
           e.date_time as event_date, 
           e.location as event_location,
           e.image_url as event_image,
           u.name as user_name,
           u.email as user_email
    FROM bookings b
    JOIN events e ON b.event_id = e.id
    JOIN users u ON b.user_id = u.id
    WHERE b.id = ?
  `;
  
  // Если пользователь не администратор, проверяем, что бронирование принадлежит ему
  if (!isAdmin) {
    query += ' AND b.user_id = ?';
  }
  
  const params = isAdmin ? [id] : [id, userId];
  
  db.get(query, params, (err, booking) => {
    if (err) {
      console.error('Ошибка при получении бронирования:', err);
      return res.status(500).json({ message: 'Ошибка сервера при получении бронирования' });
    }
    
    if (!booking) {
      return res.status(404).json({ message: 'Бронирование не найдено' });
    }
    
    res.json(booking);
  });
});
```

### 4.3 Отправка билета на email (server/routes/bookings.js)

```javascript
// Отправка билета на email
router.post('/:id/send-ticket', authenticateToken, (req, res) => {
  const { id } = req.params;
  const userId = req.user.id;
  
  // Проверяем, существует ли бронирование
  const bookingQuery = `
    SELECT b.*, e.title as event_title, e.date_time, e.location, e.image_url
    FROM bookings b
    JOIN events e ON b.event_id = e.id
    WHERE b.id = ? AND b.user_id = ?
  `;
  
  db.get(bookingQuery, [id, userId], (err, booking) => {
    if (err) {
      console.error('Ошибка при получении бронирования:', err);
      return res.status(500).json({ message: 'Ошибка сервера при отправке билета' });
    }
    
    if (!booking) {
      return res.status(404).json({ message: 'Бронирование не найдено' });
    }
    
    // Получаем email пользователя
    db.get('SELECT email, name FROM users WHERE id = ?', [userId], (err, user) => {
      if (err) {
        console.error('Ошибка при получении данных пользователя:', err);
        return res.status(500).json({ message: 'Ошибка сервера при отправке билета' });
      }
      
      if (!user) {
        return res.status(404).json({ message: 'Пользователь не найден' });
      }
      
      const { email, name } = user;
      
      // Отправляем электронное письмо с билетом
      // В реальном проекте здесь будет код отправки email
      console.log(`Отправка билета на email ${email} для пользователя ${name}`);
      console.log(`Бронирование #${booking.id} для мероприятия "${booking.event_title}"`);
      
      // Обновляем статус билета, чтобы отметить, что он был отправлен
      db.run(
        'UPDATE bookings SET ticket_sent = 1 WHERE id = ?',
        [id],
        function(err) {
          if (err) {
            console.error('Ошибка при обновлении статуса билета:', err);
            return res.status(500).json({ message: 'Ошибка сервера при отправке билета' });
          }
          
          res.status(200).json({ 
            message: 'Билет успешно отправлен на указанный адрес электронной почты',
            email
          });
        }
      );
    });
  });
});
```

### 4.4 Обновление бронирования (server/routes/bookings.js)

```javascript
// Обновление бронирования (только для администраторов)
router.put('/:id', authenticateToken, (req, res) => {
  const { id } = req.params;
  const { tickets_count, status } = req.body;
  const isAdmin = req.user.role === 'admin';
  
  // Проверяем, что пользователь является администратором
  if (!isAdmin) {
    return res.status(403).json({ message: 'Доступ запрещен. Требуются права администратора.' });
  }
  
  // Убедимся, что бронирование существует
  db.get('SELECT * FROM bookings WHERE id = ?', [id], (err, booking) => {
    if (err) {
      console.error('Ошибка при получении бронирования:', err);
      return res.status(500).json({ message: 'Ошибка сервера при обновлении бронирования' });
    }
    
    if (!booking) {
      return res.status(404).json({ message: 'Бронирование не найдено' });
    }
    
    // Получаем информацию о мероприятии для расчета общей стоимости
    db.get('SELECT price, available_seats FROM events WHERE id = ?', [booking.event_id], (err, event) => {
      if (err) {
        console.error('Ошибка при получении данных мероприятия:', err);
        return res.status(500).json({ message: 'Ошибка сервера при обновлении бронирования' });
      }
      
      if (!event) {
        return res.status(404).json({ message: 'Мероприятие не найдено' });
      }
      
      // Проверяем доступность мест, если количество билетов увеличивается
      const additionalTickets = tickets_count - booking.tickets_count;
      if (additionalTickets > 0 && additionalTickets > event.available_seats) {
        return res.status(400).json({ 
          message: `Недостаточно мест. Доступно: ${event.available_seats}` 
        });
      }
      
      // Рассчитываем новую общую стоимость
      const total_price = tickets_count * event.price;
      
      // Обновляем бронирование
      const updateBookingQuery = `
        UPDATE bookings 
        SET tickets_count = ?, 
            status = ?,
            total_price = ?
        WHERE id = ?
      `;
      
      db.run(updateBookingQuery, [tickets_count, status, total_price, id], function(err) {
        if (err) {
          console.error('Ошибка при обновлении бронирования:', err);
          return res.status(500).json({ message: 'Ошибка сервера при обновлении бронирования' });
        }
        
        // Обновляем доступные места для мероприятия
        if (additionalTickets !== 0) {
          const updateEventQuery = `
            UPDATE events 
            SET available_seats = available_seats - ? 
            WHERE id = ?
          `;
          
          db.run(updateEventQuery, [additionalTickets, booking.event_id], function(err) {
            if (err) {
              console.error('Ошибка при обновлении доступных мест:', err);
              // Продолжаем выполнение, так как бронирование уже обновлено
            }
          });
        }
        
        res.status(200).json({ 
          message: 'Бронирование успешно обновлено',
          booking_id: id
        });
      });
    });
  });
});
```

## 5. КОНТЕКСТ АУТЕНТИФИКАЦИИ (client/src/context/AuthContext.js)

```javascript
export const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(null);
  const [token, setToken] = useState(localStorage.getItem('token'));
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Проверяем, авторизован ли пользователь, при загрузке компонента
  useEffect(() => {
    const checkUserLoggedIn = async () => {
      if (token) {
        try {
          const userData = await authAPI.getProfile();
          setCurrentUser(userData);
        } catch (err) {
          console.error('Ошибка проверки авторизации:', err);
          // Если токен недействителен, очищаем данные
          logout();
        } finally {
          setLoading(false);
        }
      } else {
        setLoading(false);
      }
    };
    
    checkUserLoggedIn();
  }, [token]);

  // Методы для работы с аутентификацией:
  // register, login, logout, updateProfile, changePassword (код выше)

  // Проверка, является ли пользователь администратором
  const isAdmin = currentUser?.role === 'admin';

  // Предоставляемое значение контекста
  const value = {
    currentUser,
    isAdmin,
    loading,
    error,
    register,
    login,
    logout,
    updateProfile,
    changePassword
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};
```

## 6. БАЗОВЫЕ ФУНКЦИИ API ДЛЯ ЗАПРОСОВ К СЕРВЕРУ (client/src/api/index.js)

```javascript
// Общая функция для выполнения запросов
const fetchWithAuth = async (url, options = {}) => {
  const headers = {
    'Content-Type': 'application/json',
    ...authHeader(),
    ...options.headers
  };

  const config = {
    ...options,
    headers
  };

  try {
    const response = await fetch(`${API_URL}${url}`, config);
    
    // Проверяем код статуса ответа
    if (!response.ok) {
      // Пытаемся получить детали ошибки из JSON
      let errorData;
      try {
        errorData = await response.json();
      } catch (e) {
        // Если не можем получить JSON, используем текст ответа
        const errorText = await response.text();
        throw new Error(`Ошибка ${response.status}: ${errorText}`);
      }
      throw new Error(errorData.error || `Ошибка сервера: ${response.status}`);
    }

    // Пытаемся разобрать JSON-ответ
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('API Error:', error);
    throw error;
  }
};
```

## 7. ЗАКЛЮЧЕНИЕ

В этом листинге кода представлены основные алгоритмы бизнес-логики приложения для бронирования мероприятий, включая:
- Инициализацию базы данных и создание структуры таблиц
- Алгоритмы аутентификации и авторизации пользователей
- Функции управления мероприятиями (CRUD-операции)
- Алгоритмы управления бронированиями, включая создание, отмену и обновление брони
- Отправку билетов на электронную почту
- Контекст аутентификации для клиентской части приложения
- Базовые функции API для выполнения запросов к серверу

Представленные алгоритмы реализуют полный цикл работы системы бронирования, от регистрации пользователей до управления мероприятиями и бронированиями. 